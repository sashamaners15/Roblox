local startTime = tick()

getgenv().Version = "1"

task.spawn(function()
    if not getgenv().AntiAfk then
        getgenv().AntiAfk = true
        while true do
            task.wait(1100)
            pcall(function()
                game:GetService("VirtualInputManager"):SendKeyEvent(true, "RightBracket", false, game)
            end)
        end
    end
end)

local function GetService(serviceName)
    return game:GetService(serviceName)
end

local Players = GetService("Players")
local ReplicatedStorage = GetService("ReplicatedStorage")
local ReplicatedModules = ReplicatedStorage:WaitForChild("ReplicatedModules")
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")
local Knit = ReplicatedModules.KnitPackage.Knit
local MoveInputService = Knit.Services.MoveInputService
local CombatService = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("CombatService")
local HttpService = GetService("HttpService")
local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/main/source.lua", true))()

local Trove = loadstring(game:HttpGet("https://raw.githubusercontent.com/sashamaners15/Roblox/refs/heads/main/Trove"))()

local Effects = loadstring(game:HttpGet("https://raw.githubusercontent.com/sashamaners15/Roblox/refs/heads/main/AUT_EFFECTS"))()

local function onCharacterAdded(char)
    Character = char
    HRP = char:WaitForChild("HumanoidRootPart", 5)
    Humanoid = char:WaitForChild("Humanoid", 5)
end

if Player.Character then
    onCharacterAdded(Player.Character)
end
Player.CharacterAdded:Connect(onCharacterAdded)

local Window = Luna:CreateWindow({
	Name = "Prime Hub",
	Subtitle = nil,
	LogoID = "82795327169782",
	LoadingEnabled = true,
	LoadingTitle = "Prime Hub",
	LoadingSubtitle = "Initializing...",
	ConfigSettings = {
		RootFolder = "Prime Hub",
		ConfigFolder = "Configs",
		AutoSave = true
	}
})

local function SaveConfig(configName)
    local configPath = string.format("%s/%s.json", Window.ConfigSettings.RootFolder, configName)
    local configData = HttpService:JSONEncode(Window:GetAllSettings())
    writefile(configPath, configData)
    print("[Prime Hub] Конфигурация сохранена: " .. configPath)
end

local function LoadConfig(configName)
    local configPath = string.format("%s/%s.json", Window.ConfigSettings.RootFolder, configName)
    if isfile(configPath) then
        local success, result = pcall(function()
            local configData = readfile(configPath)
            local decodedData = HttpService:JSONDecode(configData)
            Window:LoadSettings(decodedData)
        end)

        if success then
            print("[Prime Hub] Конфигурация успешно загружена: " .. configPath)
        else
            warn("[Prime Hub] Ошибка при загрузке конфигурации: " .. tostring(result))
        end
    else
        warn("[Prime Hub] Конфигурация не найдена: " .. configPath)
    end
end

LoadConfig("DefaultConfig")

Window:CreateHomeTab({
	SupportedExecutors = {},
	DiscordInvite = "1234",
	Icon = 1,
})

local Main = Window:CreateTab({
	Name = "Main",
	Icon = "view_in_ar",
	ImageSource = "Material",
	ShowTitle = true
})

local Farm = Window:CreateTab({
	Name = "Farm",
	Icon = "view_in_ar",
	ImageSource = "Material",
	ShowTitle = true
})

local Dex1 = Main:CreateButton({
	Name = "Dex",
	Description = nil,
    	Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
    	end
})

local Label = Farm:CreateLabel({
	Text = "DONT use everything at once",
	Style = 3 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local UCoinsFarm = Farm:CreateToggle({
    Name = '<font color="rgb(255,255,0)">UCoins</font><font color="rgb(255,255,255)"> Farm</font>',
    Description = nil,
    CurrentValue = false,
        Callback = function(Value)
            if Value then
                
                if game.PlaceId ~= 8023712967 then
                    
                    Luna:Notification({ 
                        Title = "Warning",
                        Icon = "notifications_active",
                        ImageSource = "Material",
                        Content = "Teleporting to [ Boundless Tower ]..."
                    })

                    Effects.D4C_Transition()

                end

            end
        end
}, "UCoinsFarm")

local UShardsFarm = Farm:CreateToggle({
    Name = '<font color="rgb(173,216,230)">U</font><font color="rgb(135,206,250)"><s>s</s></font><font color="rgb(255,255,255)"> Farm</font>',
    Description = nil,
    CurrentValue = false,
        Callback = function(Value)
            if Value then
                
                if game.PlaceId ~= 1 then
                    
                    Luna:Notification({ 
                        Title = "Warning",
                        Icon = "notifications_active",
                        ImageSource = "Material",
                        Content = "Teleporting to [ Boundless Tower ]..."
                    })

                    Effects.D4C_Transition()

                end

            end
        end
}, "UShardsFarm")

local remotespy1 = Main:CreateButton({
	Name = "Hydroxide",
	Description = nil,
    	Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/Upbolt/Hydroxide/revision/init.lua"))()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/FrostLua/Scripts/main/init.lua"))()
    	end
})

local remotespy2 = Main:CreateButton({
	Name = "SimpleSpy",
	Description = nil,
    	Callback = function()
            loadstring(game:HttpGet("https://github.com/exxtremestuffs/SimpleSpySource/raw/master/SimpleSpy.lua"))()
    	end
})

local infiniteyeild = Main:CreateButton({
	Name = "Infiniteyield",
	Description = nil,
    	Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/edgeiy/infiniteyield/master/source"))()
    	end
})




Window.OnSave = function()
    SaveConfig("DefaultConfig")
end

local elapsedTime = math.floor((tick() - startTime) * 1000) / 1000

Luna:Notification({ 
	Title = "Prime Hub",
	Icon = "notifications_active",
	ImageSource = "Material",
	Content = "Prime Hub successfully loaded in " .. tostring(elapsedTime) .. " second"
})

